// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@import url('https://fonts.googleapis.com/css?family=Montserrat');

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
}
* {
    font-family: 'Montserrat', 'Roboto',sans-serif;
}
.bar-button-menutoggle span.button-inner {
    display: none;
  }
  .bar-button-menutoggle {
    background: url('../../assets/img/menu-icon.png') no-repeat;
    width: 32px;
    height: 32px;
  }
  .toolbar-title {
      font-size: 18px;
      font-weight: bold;
  }
  .md ion-menu[type=overlay] .menu-inner{
      border-radius: 0px 30px 30px 0px !important;
  }
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        // Provide text `[text-{bp}]` attributes for aligning text based on screen size
        [text#{$infix}-center] {
            text-align: center;
        }
        [text#{$infix}-left] {
            text-align: left;
        }
        [text#{$infix}-right] {
            text-align: right;
        }
        [hidden#{$infix}-up] {
            display: none;
        }
    }
    @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
        [hidden#{$infix}-down] {
            display: none;
        }
    }
    .toolbar-background {
        background-color: transparent;
    }
    .header-ios .toolbar-background-ios, .footer-ios .toolbar-background-ios {
        border-bottom: 0
    }
    .header-md::after, .tabs-md[tabsPlacement="top"] > .tabbar::after, .footer-md::before, .tabs-md[tabsPlacement="bottom"] > .tabbar::before{
        background-image: none;
    }
    .searchbar-md .searchbar-input {
        box-shadow: none;
    }
     
    .toolbar-title.toolbar-title-md,.back-button, .toolbar-title.toolbar-title-ios, .toolbar-title.toolbar-title-wp,.ion-ios-menu, .ion-wp-menu, .ion-md-menu,.button-inner ion-icon , .button-inner span:first-child{
        color:#fff !important;
    }
    
    $colors: ( primary: transparent, secondary: #32db64, danger: #f53d3d, light: #f4f4f4, dark: #222, custom: #777);
    .toolbar-title.toolbar-title-md,
    .toolbar-title.toolbar-title-ios,
    .toolbar-title.toolbar-title-wp {
        color: map-get($colors, light);
    }
    ion-header ion-icon {
        color: map-get($colors, light);
    }
    ion-navbar .back-button,
    ion-buttons {
        color: map-get($colors, light)
    }
    ion-buttons .bar-button {
        color: map-get($colors, light)
    }
    .toolbar  .searchbar-input {
        background: whitesmoke!important;
    }
    .tabbar {
        background: #ffffff !important;
        box-shadow: 0px 3px 50px -7px #000000 !important
    }
    .tabs-ios .tabbar {
        border-top:0 !important; 
    }
   
}